// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package discovery

import (
	"fmt"
	"io"

	retrievalmarket "github.com/filecoin-project/go-fil-markets/retrievalmarket"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf

var lengthBufretrievalPeers = []byte{129}

func (t *retrievalPeers) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufretrievalPeers); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Peers ([]retrievalmarket.RetrievalPeer) (slice)
	if len(t.Peers) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Peers was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Peers))); err != nil {
		return err
	}
	for _, v := range t.Peers {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}
	return nil
}

func (t *retrievalPeers) UnmarshalCBOR(r io.Reader) error {
	*t = retrievalPeers{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Peers ([]retrievalmarket.RetrievalPeer) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Peers: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Peers = make([]retrievalmarket.RetrievalPeer, extra)
	}

	for i := 0; i < int(extra); i++ {

		var v retrievalmarket.RetrievalPeer
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.Peers[i] = v
	}

	return nil
}
